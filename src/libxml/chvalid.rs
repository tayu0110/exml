//! Provide methods and data structures for handling Unicode characters and strings.  
//! This module is based on `libxml/chvalid.h`, `chvalid.c`, and so on in `libxml2-v2.11.8`.
//!
//! Please refer to original libxml2 documents also.

use std::{
    ffi::{c_int, c_uint, c_ushort},
    ptr::null,
};

/*
 * Define our typedefs and structures
 *
 */
pub(crate) type XmlChSRangePtr = *mut XmlChSRange;
pub(crate) struct XmlChSRange {
    pub(crate) low: c_ushort,
    pub(crate) high: c_ushort,
}

pub(crate) type XmlChLRangePtr = *mut XmlChLRange;
pub(crate) struct XmlChLRange {
    pub(crate) low: c_uint,
    pub(crate) high: c_uint,
}

pub(crate) type XmlChRangeGroupPtr = *mut XmlChRangeGroup;
pub struct XmlChRangeGroup {
    pub(crate) nb_short_range: c_int,
    pub(crate) nb_long_range: c_int,
    pub(crate) short_range: *const XmlChSRange, /* points to an array of ranges */
    pub(crate) long_range: *const XmlChLRange,
}

/// Check if the character ranges that `rptr` points contain `val`.  
/// Return `true` if so, otherwise return `false`.
///
/// Please refer to the document of `xmlCharInRange` for original libxml2.
pub unsafe extern "C" fn xml_char_in_range(val: c_uint, rptr: *const XmlChRangeGroup) -> bool {
    let mut low: c_int;
    let mut high: c_int;
    let mut mid: c_int;
    let sptr: *const XmlChSRange;
    let lptr: *const XmlChLRange;

    if rptr.is_null() {
        return false;
    }
    if val < 0x10000 {
        /* is val in 'short' or 'long'  array? */
        if (*rptr).nb_short_range == 0 {
            return false;
        }
        low = 0;
        high = (*rptr).nb_short_range - 1;
        sptr = (*rptr).short_range;
        while low <= high {
            mid = (low + high) / 2;
            if (val as c_ushort) < (*sptr.add(mid as _)).low {
                high = mid - 1;
            } else if val as c_ushort > (*sptr.add(mid as _)).high {
                low = mid + 1;
            } else {
                return true;
            }
        }
    } else {
        if (*rptr).nb_long_range == 0 {
            return false;
        }
        low = 0;
        high = (*rptr).nb_long_range - 1;
        lptr = (*rptr).long_range;
        while low <= high {
            mid = (low + high) / 2;
            if val < (*lptr.add(mid as _)).low {
                high = mid - 1;
            } else if val > (*lptr.add(mid as _)).high {
                low = mid + 1;
            } else {
                return true;
            }
        }
    }
    false
}

/**
 * XmlIsBaseCharCh:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_base_char_ch {
    ( $c:expr ) => {
        (0x41..=0x5a).contains(&$c)
            || (0x61..=0x7a).contains(&$c)
            || (0xc0..=0xd6).contains(&$c)
            || (0xd8..=0xf6).contains(&$c)
            || 0xf8 <= $c
    };
}

pub(crate) const XML_IS_BASE_CHAR_GROUP: XmlChRangeGroup = XmlChRangeGroup {
    nb_short_range: 197,
    nb_long_range: 0,
    short_range: XML_IS_BASE_CHAR_SRNG,
    long_range: null(),
};

/**
 * xmlIsBaseCharQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_base_char_q {
    ( $c:expr ) => {
        if $c < 0x100 {
            $crate::xml_is_base_char_ch!($c)
        } else {
            $crate::libxml::chvalid::xml_char_in_range(
                $c,
                &$crate::libxml::chvalid::XML_IS_BASE_CHAR_GROUP as _,
            )
        }
    };
}

const XML_IS_CHAR_SRNG: *const XmlChSRange = [
    XmlChSRange {
        low: 0x100,
        high: 0xd7ff,
    },
    XmlChSRange {
        low: 0xe000,
        high: 0xfffd,
    },
]
.as_ptr();
const XML_IS_CHAR_LRNG: *const XmlChLRange = [XmlChLRange {
    low: 0x10000,
    high: 0x10ffff,
}]
.as_ptr();

/**
 * XmlIsBlankCh:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_blank_ch {
    ($c:expr) => {
        $c == 0x20 || (0x9..=0xa).contains(&$c) || $c == 0xd
    };
}

/**
 * xmlIsBlankQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_blank_q {
    ( $c:expr ) => {
        if $c < 0x100 {
            $crate::xml_is_blank_ch!($c)
        } else {
            false
        }
    };
}

/**
 * xml_is_char_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_char_ch {
    ( $c:expr ) => {
        (0x9..=0xa).contains(&$c) || $c == 0xd || 0x20 <= $c
    };
}

/**
 * xmlIsCharQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_char_q {
    ( $c:expr ) => {
        if $c < 0x100 {
            $crate::xml_is_char_ch!($c)
        } else {
            (0x100..=0xd7ff).contains(&$c)
                || (0xe000..=0xfffd).contains(&$c)
                || (0x10000..=0x10ffff).contains(&$c)
        }
    };
}

pub(crate) const XML_IS_CHAR_GROUP: XmlChRangeGroup = XmlChRangeGroup {
    nb_short_range: 2,
    nb_long_range: 1,
    short_range: XML_IS_CHAR_SRNG,
    long_range: XML_IS_CHAR_LRNG,
};

/**
 * xmlIsCombiningQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_combining_q {
    ( $c:expr ) => {
        if $c < 0x100 {
            false
        } else {
            $crate::libxml::chvalid::xml_char_in_range(
                $c,
                &$crate::libxml::chvalid::XML_IS_COMBINING_GROUP as _,
            )
        }
    };
}

const XML_IS_COMBINING_SRNG: *const XmlChSRange = [
    XmlChSRange {
        low: 0x300,
        high: 0x345,
    },
    XmlChSRange {
        low: 0x360,
        high: 0x361,
    },
    XmlChSRange {
        low: 0x483,
        high: 0x486,
    },
    XmlChSRange {
        low: 0x591,
        high: 0x5a1,
    },
    XmlChSRange {
        low: 0x5a3,
        high: 0x5b9,
    },
    XmlChSRange {
        low: 0x5bb,
        high: 0x5bd,
    },
    XmlChSRange {
        low: 0x5bf,
        high: 0x5bf,
    },
    XmlChSRange {
        low: 0x5c1,
        high: 0x5c2,
    },
    XmlChSRange {
        low: 0x5c4,
        high: 0x5c4,
    },
    XmlChSRange {
        low: 0x64b,
        high: 0x652,
    },
    XmlChSRange {
        low: 0x670,
        high: 0x670,
    },
    XmlChSRange {
        low: 0x6d6,
        high: 0x6dc,
    },
    XmlChSRange {
        low: 0x6dd,
        high: 0x6df,
    },
    XmlChSRange {
        low: 0x6e0,
        high: 0x6e4,
    },
    XmlChSRange {
        low: 0x6e7,
        high: 0x6e8,
    },
    XmlChSRange {
        low: 0x6ea,
        high: 0x6ed,
    },
    XmlChSRange {
        low: 0x901,
        high: 0x903,
    },
    XmlChSRange {
        low: 0x93c,
        high: 0x93c,
    },
    XmlChSRange {
        low: 0x93e,
        high: 0x94c,
    },
    XmlChSRange {
        low: 0x94d,
        high: 0x94d,
    },
    XmlChSRange {
        low: 0x951,
        high: 0x954,
    },
    XmlChSRange {
        low: 0x962,
        high: 0x963,
    },
    XmlChSRange {
        low: 0x981,
        high: 0x983,
    },
    XmlChSRange {
        low: 0x9bc,
        high: 0x9bc,
    },
    XmlChSRange {
        low: 0x9be,
        high: 0x9be,
    },
    XmlChSRange {
        low: 0x9bf,
        high: 0x9bf,
    },
    XmlChSRange {
        low: 0x9c0,
        high: 0x9c4,
    },
    XmlChSRange {
        low: 0x9c7,
        high: 0x9c8,
    },
    XmlChSRange {
        low: 0x9cb,
        high: 0x9cd,
    },
    XmlChSRange {
        low: 0x9d7,
        high: 0x9d7,
    },
    XmlChSRange {
        low: 0x9e2,
        high: 0x9e3,
    },
    XmlChSRange {
        low: 0xa02,
        high: 0xa02,
    },
    XmlChSRange {
        low: 0xa3c,
        high: 0xa3c,
    },
    XmlChSRange {
        low: 0xa3e,
        high: 0xa3e,
    },
    XmlChSRange {
        low: 0xa3f,
        high: 0xa3f,
    },
    XmlChSRange {
        low: 0xa40,
        high: 0xa42,
    },
    XmlChSRange {
        low: 0xa47,
        high: 0xa48,
    },
    XmlChSRange {
        low: 0xa4b,
        high: 0xa4d,
    },
    XmlChSRange {
        low: 0xa70,
        high: 0xa71,
    },
    XmlChSRange {
        low: 0xa81,
        high: 0xa83,
    },
    XmlChSRange {
        low: 0xabc,
        high: 0xabc,
    },
    XmlChSRange {
        low: 0xabe,
        high: 0xac5,
    },
    XmlChSRange {
        low: 0xac7,
        high: 0xac9,
    },
    XmlChSRange {
        low: 0xacb,
        high: 0xacd,
    },
    XmlChSRange {
        low: 0xb01,
        high: 0xb03,
    },
    XmlChSRange {
        low: 0xb3c,
        high: 0xb3c,
    },
    XmlChSRange {
        low: 0xb3e,
        high: 0xb43,
    },
    XmlChSRange {
        low: 0xb47,
        high: 0xb48,
    },
    XmlChSRange {
        low: 0xb4b,
        high: 0xb4d,
    },
    XmlChSRange {
        low: 0xb56,
        high: 0xb57,
    },
    XmlChSRange {
        low: 0xb82,
        high: 0xb83,
    },
    XmlChSRange {
        low: 0xbbe,
        high: 0xbc2,
    },
    XmlChSRange {
        low: 0xbc6,
        high: 0xbc8,
    },
    XmlChSRange {
        low: 0xbca,
        high: 0xbcd,
    },
    XmlChSRange {
        low: 0xbd7,
        high: 0xbd7,
    },
    XmlChSRange {
        low: 0xc01,
        high: 0xc03,
    },
    XmlChSRange {
        low: 0xc3e,
        high: 0xc44,
    },
    XmlChSRange {
        low: 0xc46,
        high: 0xc48,
    },
    XmlChSRange {
        low: 0xc4a,
        high: 0xc4d,
    },
    XmlChSRange {
        low: 0xc55,
        high: 0xc56,
    },
    XmlChSRange {
        low: 0xc82,
        high: 0xc83,
    },
    XmlChSRange {
        low: 0xcbe,
        high: 0xcc4,
    },
    XmlChSRange {
        low: 0xcc6,
        high: 0xcc8,
    },
    XmlChSRange {
        low: 0xcca,
        high: 0xccd,
    },
    XmlChSRange {
        low: 0xcd5,
        high: 0xcd6,
    },
    XmlChSRange {
        low: 0xd02,
        high: 0xd03,
    },
    XmlChSRange {
        low: 0xd3e,
        high: 0xd43,
    },
    XmlChSRange {
        low: 0xd46,
        high: 0xd48,
    },
    XmlChSRange {
        low: 0xd4a,
        high: 0xd4d,
    },
    XmlChSRange {
        low: 0xd57,
        high: 0xd57,
    },
    XmlChSRange {
        low: 0xe31,
        high: 0xe31,
    },
    XmlChSRange {
        low: 0xe34,
        high: 0xe3a,
    },
    XmlChSRange {
        low: 0xe47,
        high: 0xe4e,
    },
    XmlChSRange {
        low: 0xeb1,
        high: 0xeb1,
    },
    XmlChSRange {
        low: 0xeb4,
        high: 0xeb9,
    },
    XmlChSRange {
        low: 0xebb,
        high: 0xebc,
    },
    XmlChSRange {
        low: 0xec8,
        high: 0xecd,
    },
    XmlChSRange {
        low: 0xf18,
        high: 0xf19,
    },
    XmlChSRange {
        low: 0xf35,
        high: 0xf35,
    },
    XmlChSRange {
        low: 0xf37,
        high: 0xf37,
    },
    XmlChSRange {
        low: 0xf39,
        high: 0xf39,
    },
    XmlChSRange {
        low: 0xf3e,
        high: 0xf3e,
    },
    XmlChSRange {
        low: 0xf3f,
        high: 0xf3f,
    },
    XmlChSRange {
        low: 0xf71,
        high: 0xf84,
    },
    XmlChSRange {
        low: 0xf86,
        high: 0xf8b,
    },
    XmlChSRange {
        low: 0xf90,
        high: 0xf95,
    },
    XmlChSRange {
        low: 0xf97,
        high: 0xf97,
    },
    XmlChSRange {
        low: 0xf99,
        high: 0xfad,
    },
    XmlChSRange {
        low: 0xfb1,
        high: 0xfb7,
    },
    XmlChSRange {
        low: 0xfb9,
        high: 0xfb9,
    },
    XmlChSRange {
        low: 0x20d0,
        high: 0x20dc,
    },
    XmlChSRange {
        low: 0x20e1,
        high: 0x20e1,
    },
    XmlChSRange {
        low: 0x302a,
        high: 0x302f,
    },
    XmlChSRange {
        low: 0x3099,
        high: 0x3099,
    },
    XmlChSRange {
        low: 0x309a,
        high: 0x309a,
    },
]
.as_ptr();

pub(crate) const XML_IS_COMBINING_GROUP: XmlChRangeGroup = XmlChRangeGroup {
    nb_short_range: 95,
    nb_long_range: 0,
    short_range: XML_IS_COMBINING_SRNG,
    long_range: null(),
};

/**
 * xmlIsDigit_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_digit_ch {
    ( $c:expr ) => {
        (0x30..=0x39).contains(&$c)
    };
}

/**
 * xmlIsDigitQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_digit_q {
    ( $c:expr ) => {
        if $c < 0x100 {
            $crate::xml_is_digit_ch!($c)
        } else {
            $crate::libxml::chvalid::xml_char_in_range(
                $c,
                &$crate::libxml::chvalid::XML_IS_DIGIT_GROUP as _,
            )
        }
    };
}

const XML_IS_DIGIT_SRNG: *const XmlChSRange = [
    XmlChSRange {
        low: 0x660,
        high: 0x669,
    },
    XmlChSRange {
        low: 0x6f0,
        high: 0x6f9,
    },
    XmlChSRange {
        low: 0x966,
        high: 0x96f,
    },
    XmlChSRange {
        low: 0x9e6,
        high: 0x9ef,
    },
    XmlChSRange {
        low: 0xa66,
        high: 0xa6f,
    },
    XmlChSRange {
        low: 0xae6,
        high: 0xaef,
    },
    XmlChSRange {
        low: 0xb66,
        high: 0xb6f,
    },
    XmlChSRange {
        low: 0xbe7,
        high: 0xbef,
    },
    XmlChSRange {
        low: 0xc66,
        high: 0xc6f,
    },
    XmlChSRange {
        low: 0xce6,
        high: 0xcef,
    },
    XmlChSRange {
        low: 0xd66,
        high: 0xd6f,
    },
    XmlChSRange {
        low: 0xe50,
        high: 0xe59,
    },
    XmlChSRange {
        low: 0xed0,
        high: 0xed9,
    },
    XmlChSRange {
        low: 0xf20,
        high: 0xf29,
    },
]
.as_ptr();
pub(crate) const XML_IS_DIGIT_GROUP: XmlChRangeGroup = XmlChRangeGroup {
    nb_short_range: 14,
    nb_long_range: 0,
    short_range: XML_IS_DIGIT_SRNG,
    long_range: null(),
};

/**
 * xmlIsExtender_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_extender_ch {
    ( $c:expr ) => {
        $c == 0xb7
    };
}

/**
 * xmlIsExtenderQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_extender_q {
    ( $c:expr ) => {
        if $c < 0x100 {
            $crate::xml_is_extender_ch!($c)
        } else {
            $crate::libxml::chvalid::xml_char_in_range(
                $c,
                &$crate::libxml::chvalid::XML_IS_EXTENDER_GROUP as _,
            )
        }
    };
}

const XML_IS_EXTENDER_SRNG: *const XmlChSRange = [
    XmlChSRange {
        low: 0x2d0,
        high: 0x2d0,
    },
    XmlChSRange {
        low: 0x2d1,
        high: 0x2d1,
    },
    XmlChSRange {
        low: 0x387,
        high: 0x387,
    },
    XmlChSRange {
        low: 0x640,
        high: 0x640,
    },
    XmlChSRange {
        low: 0xe46,
        high: 0xe46,
    },
    XmlChSRange {
        low: 0xec6,
        high: 0xec6,
    },
    XmlChSRange {
        low: 0x3005,
        high: 0x3005,
    },
    XmlChSRange {
        low: 0x3031,
        high: 0x3035,
    },
    XmlChSRange {
        low: 0x309d,
        high: 0x309e,
    },
    XmlChSRange {
        low: 0x30fc,
        high: 0x30fe,
    },
]
.as_ptr();
pub(crate) const XML_IS_EXTENDER_GROUP: XmlChRangeGroup = XmlChRangeGroup {
    nb_short_range: 10,
    nb_long_range: 0,
    short_range: XML_IS_EXTENDER_SRNG,
    long_range: null(),
};

/**
 * xmlIsIdeographicQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_ideographic_q {
    ( $c:expr ) => {
        if $c < 0x100 {
            false
        } else {
            (0x4e00..=0x9fa5).contains(&$c) || $c == 0x3007 || (0x3021..=0x3029).contains(&$c)
        }
    };
}

const XML_IS_IDEOGRAPHIC_SRNG: *const XmlChSRange = [
    XmlChSRange {
        low: 0x3007,
        high: 0x3007,
    },
    XmlChSRange {
        low: 0x3021,
        high: 0x3029,
    },
    XmlChSRange {
        low: 0x4e00,
        high: 0x9fa5,
    },
]
.as_ptr();
pub(crate) const XML_IS_IDEOGRAPHIC_GROUP: XmlChRangeGroup = XmlChRangeGroup {
    nb_short_range: 3,
    nb_long_range: 0,
    short_range: XML_IS_IDEOGRAPHIC_SRNG,
    long_range: null(),
};

pub const XML_IS_PUBID_CHAR_TAB: [bool; 256] = [
    false, false, false, false, false, false, false, false, false, false, true, false, false, true,
    false, false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, true, true, false, true, true, true, false, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, false, true, false, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, false, false, false, false, true, false, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false,
];

const XML_IS_BASE_CHAR_SRNG: *const XmlChSRange = [
    XmlChSRange {
        low: 0x100,
        high: 0x131,
    },
    XmlChSRange {
        low: 0x134,
        high: 0x13e,
    },
    XmlChSRange {
        low: 0x141,
        high: 0x148,
    },
    XmlChSRange {
        low: 0x14a,
        high: 0x17e,
    },
    XmlChSRange {
        low: 0x180,
        high: 0x1c3,
    },
    XmlChSRange {
        low: 0x1cd,
        high: 0x1f0,
    },
    XmlChSRange {
        low: 0x1f4,
        high: 0x1f5,
    },
    XmlChSRange {
        low: 0x1fa,
        high: 0x217,
    },
    XmlChSRange {
        low: 0x250,
        high: 0x2a8,
    },
    XmlChSRange {
        low: 0x2bb,
        high: 0x2c1,
    },
    XmlChSRange {
        low: 0x386,
        high: 0x386,
    },
    XmlChSRange {
        low: 0x388,
        high: 0x38a,
    },
    XmlChSRange {
        low: 0x38c,
        high: 0x38c,
    },
    XmlChSRange {
        low: 0x38e,
        high: 0x3a1,
    },
    XmlChSRange {
        low: 0x3a3,
        high: 0x3ce,
    },
    XmlChSRange {
        low: 0x3d0,
        high: 0x3d6,
    },
    XmlChSRange {
        low: 0x3da,
        high: 0x3da,
    },
    XmlChSRange {
        low: 0x3dc,
        high: 0x3dc,
    },
    XmlChSRange {
        low: 0x3de,
        high: 0x3de,
    },
    XmlChSRange {
        low: 0x3e0,
        high: 0x3e0,
    },
    XmlChSRange {
        low: 0x3e2,
        high: 0x3f3,
    },
    XmlChSRange {
        low: 0x401,
        high: 0x40c,
    },
    XmlChSRange {
        low: 0x40e,
        high: 0x44f,
    },
    XmlChSRange {
        low: 0x451,
        high: 0x45c,
    },
    XmlChSRange {
        low: 0x45e,
        high: 0x481,
    },
    XmlChSRange {
        low: 0x490,
        high: 0x4c4,
    },
    XmlChSRange {
        low: 0x4c7,
        high: 0x4c8,
    },
    XmlChSRange {
        low: 0x4cb,
        high: 0x4cc,
    },
    XmlChSRange {
        low: 0x4d0,
        high: 0x4eb,
    },
    XmlChSRange {
        low: 0x4ee,
        high: 0x4f5,
    },
    XmlChSRange {
        low: 0x4f8,
        high: 0x4f9,
    },
    XmlChSRange {
        low: 0x531,
        high: 0x556,
    },
    XmlChSRange {
        low: 0x559,
        high: 0x559,
    },
    XmlChSRange {
        low: 0x561,
        high: 0x586,
    },
    XmlChSRange {
        low: 0x5d0,
        high: 0x5ea,
    },
    XmlChSRange {
        low: 0x5f0,
        high: 0x5f2,
    },
    XmlChSRange {
        low: 0x621,
        high: 0x63a,
    },
    XmlChSRange {
        low: 0x641,
        high: 0x64a,
    },
    XmlChSRange {
        low: 0x671,
        high: 0x6b7,
    },
    XmlChSRange {
        low: 0x6ba,
        high: 0x6be,
    },
    XmlChSRange {
        low: 0x6c0,
        high: 0x6ce,
    },
    XmlChSRange {
        low: 0x6d0,
        high: 0x6d3,
    },
    XmlChSRange {
        low: 0x6d5,
        high: 0x6d5,
    },
    XmlChSRange {
        low: 0x6e5,
        high: 0x6e6,
    },
    XmlChSRange {
        low: 0x905,
        high: 0x939,
    },
    XmlChSRange {
        low: 0x93d,
        high: 0x93d,
    },
    XmlChSRange {
        low: 0x958,
        high: 0x961,
    },
    XmlChSRange {
        low: 0x985,
        high: 0x98c,
    },
    XmlChSRange {
        low: 0x98f,
        high: 0x990,
    },
    XmlChSRange {
        low: 0x993,
        high: 0x9a8,
    },
    XmlChSRange {
        low: 0x9aa,
        high: 0x9b0,
    },
    XmlChSRange {
        low: 0x9b2,
        high: 0x9b2,
    },
    XmlChSRange {
        low: 0x9b6,
        high: 0x9b9,
    },
    XmlChSRange {
        low: 0x9dc,
        high: 0x9dd,
    },
    XmlChSRange {
        low: 0x9df,
        high: 0x9e1,
    },
    XmlChSRange {
        low: 0x9f0,
        high: 0x9f1,
    },
    XmlChSRange {
        low: 0xa05,
        high: 0xa0a,
    },
    XmlChSRange {
        low: 0xa0f,
        high: 0xa10,
    },
    XmlChSRange {
        low: 0xa13,
        high: 0xa28,
    },
    XmlChSRange {
        low: 0xa2a,
        high: 0xa30,
    },
    XmlChSRange {
        low: 0xa32,
        high: 0xa33,
    },
    XmlChSRange {
        low: 0xa35,
        high: 0xa36,
    },
    XmlChSRange {
        low: 0xa38,
        high: 0xa39,
    },
    XmlChSRange {
        low: 0xa59,
        high: 0xa5c,
    },
    XmlChSRange {
        low: 0xa5e,
        high: 0xa5e,
    },
    XmlChSRange {
        low: 0xa72,
        high: 0xa74,
    },
    XmlChSRange {
        low: 0xa85,
        high: 0xa8b,
    },
    XmlChSRange {
        low: 0xa8d,
        high: 0xa8d,
    },
    XmlChSRange {
        low: 0xa8f,
        high: 0xa91,
    },
    XmlChSRange {
        low: 0xa93,
        high: 0xaa8,
    },
    XmlChSRange {
        low: 0xaaa,
        high: 0xab0,
    },
    XmlChSRange {
        low: 0xab2,
        high: 0xab3,
    },
    XmlChSRange {
        low: 0xab5,
        high: 0xab9,
    },
    XmlChSRange {
        low: 0xabd,
        high: 0xabd,
    },
    XmlChSRange {
        low: 0xae0,
        high: 0xae0,
    },
    XmlChSRange {
        low: 0xb05,
        high: 0xb0c,
    },
    XmlChSRange {
        low: 0xb0f,
        high: 0xb10,
    },
    XmlChSRange {
        low: 0xb13,
        high: 0xb28,
    },
    XmlChSRange {
        low: 0xb2a,
        high: 0xb30,
    },
    XmlChSRange {
        low: 0xb32,
        high: 0xb33,
    },
    XmlChSRange {
        low: 0xb36,
        high: 0xb39,
    },
    XmlChSRange {
        low: 0xb3d,
        high: 0xb3d,
    },
    XmlChSRange {
        low: 0xb5c,
        high: 0xb5d,
    },
    XmlChSRange {
        low: 0xb5f,
        high: 0xb61,
    },
    XmlChSRange {
        low: 0xb85,
        high: 0xb8a,
    },
    XmlChSRange {
        low: 0xb8e,
        high: 0xb90,
    },
    XmlChSRange {
        low: 0xb92,
        high: 0xb95,
    },
    XmlChSRange {
        low: 0xb99,
        high: 0xb9a,
    },
    XmlChSRange {
        low: 0xb9c,
        high: 0xb9c,
    },
    XmlChSRange {
        low: 0xb9e,
        high: 0xb9f,
    },
    XmlChSRange {
        low: 0xba3,
        high: 0xba4,
    },
    XmlChSRange {
        low: 0xba8,
        high: 0xbaa,
    },
    XmlChSRange {
        low: 0xbae,
        high: 0xbb5,
    },
    XmlChSRange {
        low: 0xbb7,
        high: 0xbb9,
    },
    XmlChSRange {
        low: 0xc05,
        high: 0xc0c,
    },
    XmlChSRange {
        low: 0xc0e,
        high: 0xc10,
    },
    XmlChSRange {
        low: 0xc12,
        high: 0xc28,
    },
    XmlChSRange {
        low: 0xc2a,
        high: 0xc33,
    },
    XmlChSRange {
        low: 0xc35,
        high: 0xc39,
    },
    XmlChSRange {
        low: 0xc60,
        high: 0xc61,
    },
    XmlChSRange {
        low: 0xc85,
        high: 0xc8c,
    },
    XmlChSRange {
        low: 0xc8e,
        high: 0xc90,
    },
    XmlChSRange {
        low: 0xc92,
        high: 0xca8,
    },
    XmlChSRange {
        low: 0xcaa,
        high: 0xcb3,
    },
    XmlChSRange {
        low: 0xcb5,
        high: 0xcb9,
    },
    XmlChSRange {
        low: 0xcde,
        high: 0xcde,
    },
    XmlChSRange {
        low: 0xce0,
        high: 0xce1,
    },
    XmlChSRange {
        low: 0xd05,
        high: 0xd0c,
    },
    XmlChSRange {
        low: 0xd0e,
        high: 0xd10,
    },
    XmlChSRange {
        low: 0xd12,
        high: 0xd28,
    },
    XmlChSRange {
        low: 0xd2a,
        high: 0xd39,
    },
    XmlChSRange {
        low: 0xd60,
        high: 0xd61,
    },
    XmlChSRange {
        low: 0xe01,
        high: 0xe2e,
    },
    XmlChSRange {
        low: 0xe30,
        high: 0xe30,
    },
    XmlChSRange {
        low: 0xe32,
        high: 0xe33,
    },
    XmlChSRange {
        low: 0xe40,
        high: 0xe45,
    },
    XmlChSRange {
        low: 0xe81,
        high: 0xe82,
    },
    XmlChSRange {
        low: 0xe84,
        high: 0xe84,
    },
    XmlChSRange {
        low: 0xe87,
        high: 0xe88,
    },
    XmlChSRange {
        low: 0xe8a,
        high: 0xe8a,
    },
    XmlChSRange {
        low: 0xe8d,
        high: 0xe8d,
    },
    XmlChSRange {
        low: 0xe94,
        high: 0xe97,
    },
    XmlChSRange {
        low: 0xe99,
        high: 0xe9f,
    },
    XmlChSRange {
        low: 0xea1,
        high: 0xea3,
    },
    XmlChSRange {
        low: 0xea5,
        high: 0xea5,
    },
    XmlChSRange {
        low: 0xea7,
        high: 0xea7,
    },
    XmlChSRange {
        low: 0xeaa,
        high: 0xeab,
    },
    XmlChSRange {
        low: 0xead,
        high: 0xeae,
    },
    XmlChSRange {
        low: 0xeb0,
        high: 0xeb0,
    },
    XmlChSRange {
        low: 0xeb2,
        high: 0xeb3,
    },
    XmlChSRange {
        low: 0xebd,
        high: 0xebd,
    },
    XmlChSRange {
        low: 0xec0,
        high: 0xec4,
    },
    XmlChSRange {
        low: 0xf40,
        high: 0xf47,
    },
    XmlChSRange {
        low: 0xf49,
        high: 0xf69,
    },
    XmlChSRange {
        low: 0x10a0,
        high: 0x10c5,
    },
    XmlChSRange {
        low: 0x10d0,
        high: 0x10f6,
    },
    XmlChSRange {
        low: 0x1100,
        high: 0x1100,
    },
    XmlChSRange {
        low: 0x1102,
        high: 0x1103,
    },
    XmlChSRange {
        low: 0x1105,
        high: 0x1107,
    },
    XmlChSRange {
        low: 0x1109,
        high: 0x1109,
    },
    XmlChSRange {
        low: 0x110b,
        high: 0x110c,
    },
    XmlChSRange {
        low: 0x110e,
        high: 0x1112,
    },
    XmlChSRange {
        low: 0x113c,
        high: 0x113c,
    },
    XmlChSRange {
        low: 0x113e,
        high: 0x113e,
    },
    XmlChSRange {
        low: 0x1140,
        high: 0x1140,
    },
    XmlChSRange {
        low: 0x114c,
        high: 0x114c,
    },
    XmlChSRange {
        low: 0x114e,
        high: 0x114e,
    },
    XmlChSRange {
        low: 0x1150,
        high: 0x1150,
    },
    XmlChSRange {
        low: 0x1154,
        high: 0x1155,
    },
    XmlChSRange {
        low: 0x1159,
        high: 0x1159,
    },
    XmlChSRange {
        low: 0x115f,
        high: 0x1161,
    },
    XmlChSRange {
        low: 0x1163,
        high: 0x1163,
    },
    XmlChSRange {
        low: 0x1165,
        high: 0x1165,
    },
    XmlChSRange {
        low: 0x1167,
        high: 0x1167,
    },
    XmlChSRange {
        low: 0x1169,
        high: 0x1169,
    },
    XmlChSRange {
        low: 0x116d,
        high: 0x116e,
    },
    XmlChSRange {
        low: 0x1172,
        high: 0x1173,
    },
    XmlChSRange {
        low: 0x1175,
        high: 0x1175,
    },
    XmlChSRange {
        low: 0x119e,
        high: 0x119e,
    },
    XmlChSRange {
        low: 0x11a8,
        high: 0x11a8,
    },
    XmlChSRange {
        low: 0x11ab,
        high: 0x11ab,
    },
    XmlChSRange {
        low: 0x11ae,
        high: 0x11af,
    },
    XmlChSRange {
        low: 0x11b7,
        high: 0x11b8,
    },
    XmlChSRange {
        low: 0x11ba,
        high: 0x11ba,
    },
    XmlChSRange {
        low: 0x11bc,
        high: 0x11c2,
    },
    XmlChSRange {
        low: 0x11eb,
        high: 0x11eb,
    },
    XmlChSRange {
        low: 0x11f0,
        high: 0x11f0,
    },
    XmlChSRange {
        low: 0x11f9,
        high: 0x11f9,
    },
    XmlChSRange {
        low: 0x1e00,
        high: 0x1e9b,
    },
    XmlChSRange {
        low: 0x1ea0,
        high: 0x1ef9,
    },
    XmlChSRange {
        low: 0x1f00,
        high: 0x1f15,
    },
    XmlChSRange {
        low: 0x1f18,
        high: 0x1f1d,
    },
    XmlChSRange {
        low: 0x1f20,
        high: 0x1f45,
    },
    XmlChSRange {
        low: 0x1f48,
        high: 0x1f4d,
    },
    XmlChSRange {
        low: 0x1f50,
        high: 0x1f57,
    },
    XmlChSRange {
        low: 0x1f59,
        high: 0x1f59,
    },
    XmlChSRange {
        low: 0x1f5b,
        high: 0x1f5b,
    },
    XmlChSRange {
        low: 0x1f5d,
        high: 0x1f5d,
    },
    XmlChSRange {
        low: 0x1f5f,
        high: 0x1f7d,
    },
    XmlChSRange {
        low: 0x1f80,
        high: 0x1fb4,
    },
    XmlChSRange {
        low: 0x1fb6,
        high: 0x1fbc,
    },
    XmlChSRange {
        low: 0x1fbe,
        high: 0x1fbe,
    },
    XmlChSRange {
        low: 0x1fc2,
        high: 0x1fc4,
    },
    XmlChSRange {
        low: 0x1fc6,
        high: 0x1fcc,
    },
    XmlChSRange {
        low: 0x1fd0,
        high: 0x1fd3,
    },
    XmlChSRange {
        low: 0x1fd6,
        high: 0x1fdb,
    },
    XmlChSRange {
        low: 0x1fe0,
        high: 0x1fec,
    },
    XmlChSRange {
        low: 0x1ff2,
        high: 0x1ff4,
    },
    XmlChSRange {
        low: 0x1ff6,
        high: 0x1ffc,
    },
    XmlChSRange {
        low: 0x2126,
        high: 0x2126,
    },
    XmlChSRange {
        low: 0x212a,
        high: 0x212b,
    },
    XmlChSRange {
        low: 0x212e,
        high: 0x212e,
    },
    XmlChSRange {
        low: 0x2180,
        high: 0x2182,
    },
    XmlChSRange {
        low: 0x3041,
        high: 0x3094,
    },
    XmlChSRange {
        low: 0x30a1,
        high: 0x30fa,
    },
    XmlChSRange {
        low: 0x3105,
        high: 0x312c,
    },
    XmlChSRange {
        low: 0xac00,
        high: 0xd7a3,
    },
]
.as_ptr();

/**
 * xmlIsPubidChar_ch:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
#[macro_export]
macro_rules! xml_is_pubid_char_ch {
    ( $c:expr ) => {
        $crate::libxml::chvalid::XML_IS_PUBID_CHAR_TAB[$c as usize]
    };
}

/**
 * xmlIsPubidCharQ:
 * @c: char to validate
 *
 * Automatically generated by genChRanges.py
 */
macro_rules! xml_is_pubid_char_q {
    ( $c:expr ) => {
        if $c < 0x100 {
            xml_is_pubid_char_ch!($c)
        } else {
            false
        }
    };
}

/**
 * xmlIsBaseChar:
 * @ch:  character to validate
 *
 * This function is DEPRECATED.
 * Use XmlIsBaseCharCh or xmlIsBaseCharQ instead
 *
 * Returns true if argument valid, false otherwise
 */
pub unsafe extern "C" fn xml_is_base_char(ch: c_uint) -> bool {
    xml_is_base_char_q!(ch)
}

/**
 * xmlIsBlank:
 * @ch:  character to validate
 *
 * This function is DEPRECATED.
 * Use XmlIsBlankCh or xmlIsBlankQ instead
 *
 * Returns true if argument valid, false otherwise
 */
pub unsafe extern "C" fn xml_is_blank(ch: c_uint) -> bool {
    xml_is_blank_q!(ch)
}

/**
 * xmlIsChar:
 * @ch:  character to validate
 *
 * This function is DEPRECATED.
 * Use xml_is_char_ch or xmlIsCharQ instead
 *
 * Returns true if argument valid, false otherwise
 */
pub unsafe extern "C" fn xml_is_char(ch: c_uint) -> bool {
    xml_is_char_q!(ch)
}

/**
 * xmlIsCombining:
 * @ch:  character to validate
 *
 * This function is DEPRECATED.
 * Use xmlIsCombiningQ instead
 *
 * Returns true if argument valid, false otherwise
 */
pub unsafe extern "C" fn xml_is_combining(ch: c_uint) -> bool {
    xml_is_combining_q!(ch)
}

/**
 * xmlIsDigit:
 * @ch:  character to validate
 *
 * This function is DEPRECATED.
 * Use xmlIsDigit_ch or xmlIsDigitQ instead
 *
 * Returns true if argument valid, false otherwise
 */
pub unsafe extern "C" fn xml_is_digit(ch: c_uint) -> bool {
    xml_is_digit_q!(ch)
}

/**
 * xmlIsExtender:
 * @ch:  character to validate
 *
 * This function is DEPRECATED.
 * Use xmlIsExtender_ch or xmlIsExtenderQ instead
 *
 * Returns true if argument valid, false otherwise
 */
pub unsafe extern "C" fn xml_is_extender(ch: c_uint) -> bool {
    xml_is_extender_q!(ch)
}

/**
 * xmlIsIdeographic:
 * @ch:  character to validate
 *
 * This function is DEPRECATED.
 * Use xmlIsIdeographicQ instead
 *
 * Returns true if argument valid, false otherwise
 */
pub unsafe extern "C" fn xml_is_ideographic(ch: c_uint) -> bool {
    xml_is_ideographic_q!(ch)
}

/**
 * xmlIsPubidChar:
 * @ch:  character to validate
 *
 * This function is DEPRECATED.
 * Use xmlIsPubidChar_ch or xmlIsPubidCharQ instead
 *
 * Returns true if argument valid, false otherwise
 */
pub fn xml_is_pubid_char(ch: c_uint) -> bool {
    xml_is_pubid_char_q!(ch)
}

#[cfg(test)]
mod tests {
    use crate::{
        libxml::{xmlerror::xml_reset_last_error, xmlmemory::xml_mem_blocks},
        test_util::*,
    };

    use super::*;

    #[test]
    fn test_xml_char_in_range() {
        let mut leaks = 0;

        unsafe {
            for n_val in 0..GEN_NB_UNSIGNED_INT {
                for n_rptr in 0..GEN_NB_CONST_XML_CH_RANGE_GROUP_PTR {
                    let mem_base = xml_mem_blocks();
                    let val = gen_unsigned_int(n_val, 0);
                    let rptr = gen_const_xml_ch_range_group_ptr(n_rptr, 1);

                    let ret_val = xml_char_in_range(val, rptr) as i32;
                    desret_int(ret_val);
                    des_unsigned_int(n_val, val, 0);
                    des_const_xml_ch_range_group_ptr(n_rptr, rptr, 1);
                    xml_reset_last_error();
                    if mem_base != xml_mem_blocks() {
                        leaks += 1;
                        eprint!(
                            "Leak of {} blocks found in xmlCharInRange",
                            xml_mem_blocks() - mem_base
                        );
                        eprint!(" {}", n_val);
                        eprintln!(" {}", n_rptr);
                    }
                }
            }
            assert!(leaks == 0, "{leaks} Leaks are found in xmlCharInRange()");
        }
    }

    #[test]
    fn test_xml_is_base_char() {
        let mut leaks = 0;

        unsafe {
            for n_ch in 0..GEN_NB_UNSIGNED_INT {
                let mem_base = xml_mem_blocks();
                let ch = gen_unsigned_int(n_ch, 0);

                let ret_val = xml_is_base_char(ch) as i32;
                desret_int(ret_val);
                des_unsigned_int(n_ch, ch, 0);
                xml_reset_last_error();
                if mem_base != xml_mem_blocks() {
                    leaks += 1;
                    eprint!(
                        "Leak of {} blocks found in xmlIsBaseChar",
                        xml_mem_blocks() - mem_base
                    );
                    eprintln!(" {}", n_ch);
                }
            }
            assert!(leaks == 0, "{leaks} Leaks are found in xmlIsBaseChar()");
        }
    }

    #[test]
    fn test_xml_is_blank() {
        let mut leaks = 0;

        unsafe {
            for n_ch in 0..GEN_NB_UNSIGNED_INT {
                let mem_base = xml_mem_blocks();
                let ch = gen_unsigned_int(n_ch, 0);

                let ret_val = xml_is_blank(ch) as i32;
                desret_int(ret_val);
                des_unsigned_int(n_ch, ch, 0);
                xml_reset_last_error();
                if mem_base != xml_mem_blocks() {
                    leaks += 1;
                    eprint!(
                        "Leak of {} blocks found in xmlIsBlank",
                        xml_mem_blocks() - mem_base
                    );
                    eprintln!(" {}", n_ch);
                }
            }
            assert!(leaks == 0, "{leaks} Leaks are found in xmlIsBlank()");
        }
    }

    #[test]
    fn test_xml_is_char() {
        let mut leaks = 0;

        unsafe {
            for n_ch in 0..GEN_NB_UNSIGNED_INT {
                let mem_base = xml_mem_blocks();
                let ch = gen_unsigned_int(n_ch, 0);

                let ret_val = xml_is_char(ch) as i32;
                desret_int(ret_val);
                des_unsigned_int(n_ch, ch, 0);
                xml_reset_last_error();
                if mem_base != xml_mem_blocks() {
                    leaks += 1;
                    eprint!(
                        "Leak of {} blocks found in xmlIsChar",
                        xml_mem_blocks() - mem_base
                    );
                    eprintln!(" {}", n_ch);
                }
            }
            assert!(leaks == 0, "{leaks} Leaks are found in xmlIsChar()");
        }
    }

    #[test]
    fn test_xml_is_combining() {
        let mut leaks = 0;

        unsafe {
            for n_ch in 0..GEN_NB_UNSIGNED_INT {
                let mem_base = xml_mem_blocks();
                let ch = gen_unsigned_int(n_ch, 0);

                let ret_val = xml_is_combining(ch) as i32;
                desret_int(ret_val);
                des_unsigned_int(n_ch, ch, 0);
                xml_reset_last_error();
                if mem_base != xml_mem_blocks() {
                    leaks += 1;
                    eprint!(
                        "Leak of {} blocks found in xmlIsCombining",
                        xml_mem_blocks() - mem_base
                    );
                    eprintln!(" {}", n_ch);
                }
            }
            assert!(leaks == 0, "{leaks} Leaks are found in xmlIsCombining()");
        }
    }

    #[test]
    fn test_xml_is_digit() {
        let mut leaks = 0;

        unsafe {
            for n_ch in 0..GEN_NB_UNSIGNED_INT {
                let mem_base = xml_mem_blocks();
                let ch = gen_unsigned_int(n_ch, 0);

                let ret_val = xml_is_digit(ch) as i32;
                desret_int(ret_val);
                des_unsigned_int(n_ch, ch, 0);
                xml_reset_last_error();
                if mem_base != xml_mem_blocks() {
                    leaks += 1;
                    eprint!(
                        "Leak of {} blocks found in xmlIsDigit",
                        xml_mem_blocks() - mem_base
                    );
                    eprintln!(" {}", n_ch);
                }
            }
            assert!(leaks == 0, "{leaks} Leaks are found in xmlIsDigit()");
        }
    }

    #[test]
    fn test_xml_is_extender() {
        let mut leaks = 0;

        unsafe {
            for n_ch in 0..GEN_NB_UNSIGNED_INT {
                let mem_base = xml_mem_blocks();
                let ch = gen_unsigned_int(n_ch, 0);

                let ret_val = xml_is_extender(ch) as i32;
                desret_int(ret_val);
                des_unsigned_int(n_ch, ch, 0);
                xml_reset_last_error();
                if mem_base != xml_mem_blocks() {
                    leaks += 1;
                    eprint!(
                        "Leak of {} blocks found in xmlIsExtender",
                        xml_mem_blocks() - mem_base
                    );
                    eprintln!(" {}", n_ch);
                }
            }
            assert!(leaks == 0, "{leaks} Leaks are found in xmlIsExtender()");
        }
    }

    #[test]
    fn test_xml_is_ideographic() {
        let mut leaks = 0;

        unsafe {
            for n_ch in 0..GEN_NB_UNSIGNED_INT {
                let mem_base = xml_mem_blocks();
                let ch = gen_unsigned_int(n_ch, 0);

                let ret_val = xml_is_ideographic(ch) as i32;
                desret_int(ret_val);
                des_unsigned_int(n_ch, ch, 0);
                xml_reset_last_error();
                if mem_base != xml_mem_blocks() {
                    leaks += 1;
                    eprint!(
                        "Leak of {} blocks found in xmlIsIdeographic",
                        xml_mem_blocks() - mem_base
                    );
                    eprintln!(" {}", n_ch);
                }
            }
            assert!(leaks == 0, "{leaks} Leaks are found in xmlIsIdeographic()");
        }
    }

    #[test]
    fn test_xml_is_pubid_char() {
        let mut leaks = 0;

        unsafe {
            for n_ch in 0..GEN_NB_UNSIGNED_INT {
                let mem_base = xml_mem_blocks();
                let ch = gen_unsigned_int(n_ch, 0);

                let ret_val = xml_is_pubid_char(ch) as i32;
                desret_int(ret_val);
                des_unsigned_int(n_ch, ch, 0);
                xml_reset_last_error();
                if mem_base != xml_mem_blocks() {
                    leaks += 1;
                    eprint!(
                        "Leak of {} blocks found in xmlIsPubidChar",
                        xml_mem_blocks() - mem_base
                    );
                    eprintln!(" {}", n_ch);
                }
            }
            assert!(leaks == 0, "{leaks} Leaks are found in xmlIsPubidChar()");
        }
    }
}
